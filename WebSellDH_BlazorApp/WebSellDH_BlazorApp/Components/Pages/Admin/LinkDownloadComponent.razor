@page "/linkdownload"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject DatabaseDbContext datacontext
@inject NavigationManager nag
@inject IJSRuntime js

@if(ProductLinks is null)
{
    <Loading/>
}
else
{
    <div class="row clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="card">
                <div class="body">
                    <button type="button" class="btn btn-success waves-effect" data-toggle="modal" data-target="#defaultModal">Add Link</button>
                    <div class="modal fade" id="defaultModal" tabindex="-1" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title" id="defaultModalLabel">ADD CATEGORIES</h4>
                                </div>
                                <EditForm Model="@createProductLink" OnValidSubmit="@CreateAsync">
                                    <DataAnnotationsValidator />
                                    <div class="modal-body">
                                        <div class="form-group">
                                            <div class="form-line">
                                                <InputText type="text" class="form-control" placeholder="Name" @bind-Value="createProductLink!.ProductLinkName" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="form-line">
                                                <InputText type="text" class="form-control" placeholder="Url" @bind-Value="createProductLink!.Url" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="submit" class="btn btn-primary waves-effect">SAVE CHANGES</button>
                                        <button type="button" class="btn btn-danger waves-effect" data-dismiss="modal">CLOSE</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="card">
                <div class="header">
                    <h2>
                        PRODUCT LINK TABLE
                    </h2>
                </div>
                <div class="body">
                    <form>
                        <div class="row clearfix">
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-6">
                                <div class="form-group form-float">
                                    <div class="form-line">
                                        <InputText type="text" class="form-control" placeholder="Search" @bind-Value="TextSearch" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-6">
                                <button type="button" @onclick="(() => OnSearch(0))" class="btn btn-primary btn-lg waves-effect">Search</button>
                            </div>
                        </div>
                    </form>
                    <div class="table-responsive">
                        <table class="table table-bordered table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Url</th>
                                    <th>Create Date</th>
                                    <th>Update Date</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    foreach (var acc in ProductLinks)
                                    {
                                        <tr>
                                            <td>@acc.ProductLinkName</td>
                                            <td>@acc.Url</td>
                                            <td>@acc.CreateDate</td>
                                            <td>@acc.UpdateDate</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu pull-right">
                                                        <li>
                                                            <a type="button" @onclick="(() => EditModal(acc))" class="waves-effect">
                                                                <i class="material-icons">mode_edit</i> Edit
                                                            </a>
                                                        </li>
                                                        <li>
                                                            <a type="button" @onclick="(() => DeleteModal(acc))" class="waves-effect">
                                                                <i class="material-icons">delete</i> Delete
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="row">
                        <div class="col-sm-7">
                            <nav>
                                <ul class="pagination">
                                    @{
                                        for (int i = 1; i <= PageCount; i++)
                                        {
                                            int captureIndex = i;
                                            string subClass = CurrentPageNumber == captureIndex ? "active" : string.Empty;
                                            string subBtnClass = CurrentPageNumber == captureIndex ? "btn btn-primary" : "btn btn-default";
                                            <li class="@subClass"><button class="@subBtnClass waves-effect" @onclick="(async () => await OnSearch(captureIndex))">@captureIndex</button></li>
                                        }
                                    }
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<DialogLinkDownloadComponent @rendermode="InteractiveServer" @ref="dialogLinkDownloadComponent" ProductLinkEdit="ProductLinkEdit" HandleDeleteEvent="HandleDeleteEvent" HandleEditEvent="HandleEditEvent"></DialogLinkDownloadComponent>

@code {
    DialogLinkDownloadComponent? dialogLinkDownloadComponent;

    ProductLink? ProductLinkEdit = new();

    string TextSearch { get; set; } = string.Empty;

    int PageCount { get; set; }
    int CurrentPageNumber { get; set; }

    private List<ProductLink>? ProductLinks;

    private ProductLink? createProductLink { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        //Accounts = await datacontext.UserAccounts.ToListAsync();
        await OnSearch(0);
        createProductLink ??= new ProductLink();
    }

    private async Task OnSearch(int page)
    {
        var data = await datacontext.ProductLinks.ToListAsync();

        if (!string.IsNullOrEmpty(TextSearch))
        {
            data = data.Where(s => (s.ProductLinkName is not null ? s.ProductLinkName.ToLower().Contains(TextSearch.ToLower()) : false)).ToList();

            ProductLinks = data;
        }

        if (page <= 0)
        {
            page = 1;
        }

        int maxRows = 10;
        int? count = (page - 1) * maxRows;
        var dataResult = data.OrderBy(x => x.ProductLinkId).Skip((int)count!).Take(maxRows).ToList();
        double pageCount = (double)((decimal)data.Count() / Convert.ToDecimal(maxRows));

        PageCount = (int)Math.Ceiling(pageCount);

        ProductLinks = dataResult;

        CurrentPageNumber = page;
    }

    private async Task CreateAsync()
    {
        if (createProductLink!.ProductLinkName is null) return;

        await datacontext.ProductLinks.AddAsync(createProductLink!);

        await datacontext.SaveChangesAsync();

        nag.Refresh(true);

    }

    private async Task EditModal(ProductLink productLink)
    {
        ProductLinkEdit = productLink;
        dialogLinkDownloadComponent!.LoadDefault();
        await js.InvokeVoidAsync("myDialogFunction");
    }

    private async Task DeleteModal(ProductLink productLink)
    {
        ProductLinkEdit = productLink;
        dialogLinkDownloadComponent!.ShowDeleteModal();
        await js.InvokeVoidAsync("myDialogFunction");
    }

    private async Task HandleEditEvent(ProductLink productLink)
    {
        datacontext.ProductLinks.Update(productLink);
        await datacontext.SaveChangesAsync();
        dialogLinkDownloadComponent!.LoadDefault();
        ProductLinkEdit = new();
        nag.Refresh(true);
    }

    private async Task HandleDeleteEvent()
    {
        if (ProductLinkEdit is null) return;

        datacontext.ProductLinks.Remove(ProductLinkEdit);
        await datacontext.SaveChangesAsync();
        dialogLinkDownloadComponent!.LoadDefault();
        ProductLinkEdit = new();
        nag.Refresh(true);
    }
}
