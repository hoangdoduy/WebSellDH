@page "/users"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject DatabaseDbContext datacontext
@inject NavigationManager nag
@inject IJSRuntime js

@if (Accounts == null)
{
    <Loading />
}
else
{
    <div class="row clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="card">
                <div class="body">
                    <button type="button" class="btn btn-success waves-effect" data-toggle="modal" data-target="#defaultModal">Add User</button>
                    <div class="modal fade" id="defaultModal" tabindex="-1" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title" id="defaultModalLabel">ADD USER</h4>
                                </div>
                                <EditForm Model="@createAccount" OnValidSubmit="@CreateAccountAsync">
                                    <DataAnnotationsValidator />
                                    <div class="modal-body">
                                        <div class="form-group">
                                            <div class="form-line">
                                                <InputText type="text" class="form-control" placeholder="UserName" @bind-Value="createAccount!.UserName" />
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <div class="form-line">
                                                <InputText type="password" class="form-control" placeholder="Password" @bind-Value="createAccount.Password" />
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <div class="form-line">
                                                <InputText type="email" class="form-control" placeholder="Email" @bind-Value="createAccount.Email" />
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <div class="form-line">
                                                <InputText type="text" class="form-control" placeholder="Phone" @bind-Value="createAccount.Phone" />
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <div class="form-line">
                                                <InputSelect @bind-Value="createAccount.Role" class="form-control show-tick">
                                                    <option value>-- Please select --</option>
                                                    <option value="0">User</option>
                                                    <option value="1">CTV</option>
                                                    <option value="2">Admin</option>
                                                </InputSelect>

                                            </div>
                                        </div>

                                    </div>
                                    <div class="modal-footer">
                                        <button type="submit" class="btn btn-primary waves-effect">SAVE CHANGES</button>
                                        <button type="button" class="btn btn-danger waves-effect" data-dismiss="modal">CLOSE</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="card">
                <div class="header">
                    <h2>
                        USERS TABLE
                    </h2>
                </div>
                <div class="body">
                    <div class="table-responsive">
                        <form>
                            <div class="row clearfix">
                                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-6">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            <InputText type="text" class="form-control" placeholder="Search" @bind-Value="TextSearch" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                    <button type="button" @onclick="(() => OnSearch(0))" class="btn btn-primary btn-lg waves-effect">Search</button>
                                </div>
                            </div>
                        </form>

                        <table class="table table-bordered table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>UserName</th>
                                    <th>Balance</th>
                                    <th>Email</th>
                                    <th>Phone</th>
                                    <th>Role</th>
                                    <th>Display</th>
                                    <th>Order Count</th>
                                    <th>Create Date</th>
                                    <th>Update Date</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    foreach (var acc in Accounts)
                                    {
                                        <tr>
                                            <td>@acc.UserName</td>
                                            <td>@{
                                                    string html = String.Format(new CultureInfo("vi-VN"), "{0:C0}", acc.Balance);
                                                    @html;
                                                }</td>
                                            <td>@acc.Email</td>
                                            <td>@acc.Phone</td>
                                            <td>
                                                @{
                                                    if (acc.Role == 0)
                                                    {
                                                        <span class="label bg-orange">User</span>
                                                    }
                                                    else if (acc.Role == 1)
                                                    {
                                                        <span class="label bg-blue">CTV</span>
                                                    }
                                                    else if (acc.Role == 2)
                                                    {
                                                        <span class="label bg-green">ADMIN</span>
                                                    }
                                                }
                                            </td>
                                            <td>
                                                @{
                                                    if (acc.Display)
                                                    {
                                                        <span class="label bg-red">Block</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="label bg-green">Active</span>
                                                    }
                                                }
                                            </td>
                                            <td>@acc.Orders?.Count</td>
                                            <td>@acc.CreateDate</td>
                                            <td>@acc.UpdateDate</td>
                                            <td>
                                                <div class="row">
                                                    <div class="col-sm-3">
                                                        <button type="button" @onclick="(() => EditBalanceModal(acc))" class="btn bg-amber btn-circle waves-effect waves-circle waves-float">
                                                            <i class="material-icons">attach_money</i>
                                                        </button>
                                                    </div>
                                                    <div class="col-sm-3">
                                                        <button type="button" @onclick="(() => EditAccoutModal(acc))" class="btn bg-blue btn-circle waves-effect waves-circle waves-float">
                                                            <i class="material-icons">mode_edit</i>
                                                        </button>
                                                    </div>
                                                    <div class="col-sm-3">
                                                        <button type="button" @onclick="(() => DeleteAccoutModal(acc))" class="btn bg-red btn-circle waves-effect waves-circle waves-float">
                                                            <i class="material-icons">delete</i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <div class="row">
                            <div class="col-sm-7">
                                <nav>
                                    <ul class="pagination">
                                        @{
                                            for (int i = 1; i <= PageCount; i++)
                                            {
                                                int captureIndex = i;
                                                string subClass = CurrentPageNumber == captureIndex ? "active" : string.Empty;
                                                string subBtnClass = CurrentPageNumber == captureIndex ? "btn btn-primary" : "btn btn-default";
                                                <li class="@subClass"><button class="@subBtnClass waves-effect" @onclick="(async () => await OnSearch(captureIndex))">@captureIndex</button></li>
                                            }
                                        }
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<DialogComponent @rendermode="InteractiveServer" @ref="dialogComponent" AccountEdit="AccountEdit" HandleEditUserAccountEvent="HandleEditUserAccountEvent" HandleConfirmDeleteEvent="HandleConfirmDeleteEvent" HandleEditBalanceEvent="HandleEditBalanceEvent">

</DialogComponent>

@code {
    DialogComponent? dialogComponent;

    UserAccount? AccountEdit = new();

    string TextSearch { get; set; } = string.Empty;

    int PageCount { get; set; }
    int CurrentPageNumber { get; set; }

    private List<UserAccount>? Accounts;

    private CreateAccount? createAccount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        //Accounts = await datacontext.UserAccounts.ToListAsync();
        await OnSearch(0);
        createAccount ??= new CreateAccount();
    }

    private async Task OnSearch(int page)
    {
        var data = await datacontext.UserAccounts.ToListAsync();

        if (!string.IsNullOrEmpty(TextSearch))
        {
            data = data.Where(s => (s.UserName is not null ? s.UserName.ToLower().Contains(TextSearch.ToLower()) : false) || (s.Email is not null ? s.Email!.ToLower().Contains(TextSearch.ToLower()) : false) || (s.Phone is not null ? s.Phone!.ToLower().Contains(TextSearch.ToLower()) : false)).ToList();

            Accounts = data;
        }

        if (page <= 0)
        {
            page = 1;
        }

        int maxRows = 10;
        int? count = (page - 1) * maxRows;
        var dataResult = data.OrderBy(x => x.UserId).Skip((int)count!).Take(maxRows).ToList();
        double pageCount = (double)((decimal)data.Count() / Convert.ToDecimal(maxRows));

        PageCount = (int)Math.Ceiling(pageCount);

        Accounts = dataResult;

        CurrentPageNumber = page;
    }

    private async Task CreateAccountAsync()
    {
        await datacontext.UserAccounts.AddAsync(new UserAccount
            {
                UserName = createAccount!.UserName,
                Password = createAccount.Password,
                Email = createAccount.Email,
                Phone = createAccount.Phone,
                Role = createAccount.Role
            });

        await datacontext.SaveChangesAsync();

        nag.NavigateTo("/users", true);

    }

    private async Task ShowEditModal()
    {
        await js.InvokeVoidAsync("myDialogFunction");
    }

    private async Task HandleEditBalanceEvent((UserAccount, decimal) arg)
    {
        

        decimal b = arg.Item2;
        UserAccount user = arg.Item1;

        user.Balance = user.Balance + b;

        datacontext.UserAccounts.Update(user);
        await datacontext.SaveChangesAsync();

        nag.Refresh(true);
    }

    private async Task EditBalanceModal(UserAccount userAccount)
    {
        AccountEdit = userAccount;
        dialogComponent!.ShowEditBalanceDialog();
        await js.InvokeVoidAsync("myDialogFunction");
    }

    private async Task HandleEditUserAccountEvent(UserAccount userAccount)
    {
        datacontext.UserAccounts.Update(userAccount);
        await datacontext.SaveChangesAsync();
        dialogComponent!.ClearModal();
        dialogComponent!.LoadDefault();

        AccountEdit = new();
        nag.Refresh(true);
    }

    private async Task EditAccoutModal(UserAccount userAccount)
    {
        AccountEdit = userAccount;
        await ShowEditModal();
    }

    private async Task DeleteAccoutModal(UserAccount userAccount)
    {
        AccountEdit = userAccount;
        dialogComponent!.ShowConfirmDialog();
        await js.InvokeVoidAsync("myDialogFunction");
    }

    private async Task HandleConfirmDeleteEvent()
    {
        if (AccountEdit is null) return;

        datacontext.UserAccounts.Remove(AccountEdit);
        await datacontext.SaveChangesAsync();
        dialogComponent!.ClearModal();
        dialogComponent!.LoadDefault();
        AccountEdit = new();
        nag.Refresh(true);

    }

    
}
